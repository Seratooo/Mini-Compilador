/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main;

import exceptions.LexicalException;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import lexico.scanner;
import lexico.tokens;


/**
 *
 * @author abubacar-dev
 */
public class AnalexForm extends javax.swing.JFrame {
    static String MyTokens="";
    /**
     * Creates new form AnalexForm
     */
    public AnalexForm() {
        initComponents(); this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtEscrever = new javax.swing.JButton();
        txtAnalisar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtVerCod = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtCod = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(229, 229, 229));

        txtEscrever.setBackground(new java.awt.Color(201, 201, 201));
        txtEscrever.setText("Escrever COD");
        txtEscrever.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEscreverActionPerformed(evt);
            }
        });

        txtAnalisar.setBackground(new java.awt.Color(201, 201, 201));
        txtAnalisar.setText("Abrir COD");
        txtAnalisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAnalisarActionPerformed(evt);
            }
        });

        txtVerCod.setEditable(false);
        txtVerCod.setColumns(20);
        txtVerCod.setFont(new java.awt.Font("Ubuntu Light", 0, 14)); // NOI18N
        txtVerCod.setRows(5);
        jScrollPane1.setViewportView(txtVerCod);

        txtCod.setEditable(false);
        txtCod.setColumns(20);
        txtCod.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
        txtCod.setRows(5);
        jScrollPane2.setViewportView(txtCod);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtAnalisar, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtEscrever, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEscrever, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAnalisar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public static void WriteToken(tokens tk){
           
            
            switch(tk.getType()){
             case 0: 
                 MyTokens+="TOK_IDENTIFICADOR ---------  -------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 1: 
                 MyTokens+="TOK_NUM-INT -------------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 2: 
                 MyTokens+=("TOK_NUM-DEC ------------------------- LEXEMA: "+tk.getText()+"\n");
             break;
             case 5: 
                 MyTokens +="TOK_"+tk.getText().toUpperCase()+" ------------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 7: 
                 MyTokens +="TOK_A-PARANTESES -------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 8: 
                 MyTokens +="TOK_F-PARENTESES -------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 9: 
                 MyTokens +="TOK_P-VIRGULA ----------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 10: 
                 MyTokens +="TOK_PONTO --------------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 11: 
                 MyTokens +="TOK_VIRGULA ------------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 12: 
                 MyTokens +="TOK_A-CHAVES ------------------------ LEXEMA: "+tk.getText()+"\n";
             break;
             case 13: 
                 MyTokens +="TOK_F-CHAVES ------------------------ LEXEMA: "+tk.getText()+"\n";
             break;
             case 14: 
                 MyTokens +="TOK_FP-RETO ------------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 15: 
                 MyTokens +="TOK_AB-RETO ------------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 16: 
                 MyTokens +="TOK_COMENTARIO ---------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 17: 
                 MyTokens +="TOK_ATRIBUICAO ---------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 18: 
                 MyTokens +="TOK_ADICAO -------------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 19: 
                 MyTokens +="TOK_SUBTRACAO ----------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 21: 
                 MyTokens +="TOK_DIVISAO -------------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 20: 
                 MyTokens +="TOK_MULTIPLICACAO -------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 22: 
                 MyTokens +="TOK_MAIOR ----------------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 23: 
                 MyTokens +="TOK_MENOR ----------------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 24: 
                 MyTokens +="TOK_NOT ------------------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 25: 
                 MyTokens +="TOK_COMPLEMENTO ----------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 26: 
                 MyTokens +="TOK_TERNARIO --------------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 27: 
                 MyTokens +="TOK_AND -------------------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 28: 
                 MyTokens +="TOK_OR --------------------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 29: 
                 MyTokens +="TOK_XOR -------------------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 30: 
                 MyTokens +="TOK_RESTO ------------------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 31: 
                 MyTokens +="TOK_SEPARADOR --------------------------- LEXEMA: "+tk.getText()+"\n";
             break;
             case 32: 
                 MyTokens +="TOK_ARROBA ------------------------------ LEXEMA: "+tk.getText()+"\n";
             break;
         }
    }
    private void txtAnalisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAnalisarActionPerformed
        // TODO add your handling code here:
        MyTokens="";
        txtEscrever.setText("Escrever COD");                     
        txtEscrever.setBackground(Color.decode("#c9c9c9"));
        
         if(txtCod.isEditable()){
                    txtCod.setEditable(false);
         }
        try{
            JFileChooser chooser = new JFileChooser();
            chooser.showOpenDialog(null);    
            File arq = chooser.getSelectedFile().getAbsoluteFile();
            
            
            
            scanner sc = new scanner(arq.getPath());
            sc.nextToken();  
            txtCod.setText(sc.ReturnConteudo());
            txtVerCod.setText(MyTokens);
           
            
            
            
            
        }catch(LexicalException ex){
              System.out.println("Erro Lexico "+ ex.getMessage());
        }catch(Exception ex){
            System.out.println("AVISO: "+ex);
        }
    }//GEN-LAST:event_txtAnalisarActionPerformed

    private void txtEscreverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEscreverActionPerformed
                // TODO add your handling code here:
                txtVerCod.setText("");
                
                txtCod.requestFocusInWindow();
                txtEscrever.setText("Analisar COD");
                txtEscrever.setBackground(Color.decode("#d6a0a0"));
                MyTokens ="";
                if(!txtCod.isEditable()){
                     txtCod.setEditable(true);
                     txtCod.setText(" ");
                     return;
                }
                txtCod.grabFocus();
                
                File arquivo  = new File("arquivoDoSistema.txt");
                
                try{
                    arquivo.createNewFile();
                    FileWriter fileR = new FileWriter (arquivo);
                    
                    BufferedWriter leitor = new BufferedWriter(fileR);
                    leitor.write(txtCod.getText());
                    leitor.newLine();
                                      
                    leitor.close();
                    
                }catch(LexicalException ex){
                      System.out.println("Erro Lexico "+ ex.getMessage());
                }catch(Exception ex){
                        System.out.println("AVISO: "+ex);
                }
                
                scanner sc = new scanner(arquivo.getPath());
                sc.nextToken();
                
                txtVerCod.setText(MyTokens);
    }//GEN-LAST:event_txtEscreverActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnalexForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnalexForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnalexForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnalexForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AnalexForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton txtAnalisar;
    private javax.swing.JTextArea txtCod;
    private javax.swing.JButton txtEscrever;
    private javax.swing.JTextArea txtVerCod;
    // End of variables declaration//GEN-END:variables
}
